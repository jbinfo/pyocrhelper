pyocrhelper v0.1


ABOUT
Ocropus is a high quality OCR software which accepts images files as input and
outputs html text files. Ocropus is quite good at what it does. pyOcrHelper is
a python class which makes interacting with Ocropus easier for an end user or
a developer by taking care of all the steps which have to be taken before
Ocropus can be used:

   1. determine filetype of input file
   2. if (etc) pdf, convert pdf to images
   3. convert input image(s) to Ocropus input image
   4. run Ocropus on the input image(s)
   5. format the Ocropus output (concatenating files if necessary)

You can checkout the pyocrhelper source from Google SVN with the following 
command:
svn checkout http://pyocrhelper.googlecode.com/svn/trunk/ pyocrhelper-read-only

There may also be releases available at:
http://code.google.com/p/pyocrhelper/downloads/list

There may also be an rpm available at:
https://build.opensuse.org/project/show?project=home:babelworx
http://software.opensuse.org/search?q=pyocrhelper


INSTALL
If you're not lucky enough to be able to install from the openSUSE build
service, then you need to make sure you have at least the following
requirements before you try to use pyocrhelper:

   1. python (pyocrhelper was developed on python 2.5 on openSUSE 10.3)
   2. sys,os,re,time,subprocess,config,shutil (should all be in python)
   3. PIL (is probably included with your python installation)
   4. ocropus & tesseract (ocropus requires an engine like tesseract)

I don't have access to a windows system to test this. As far as I know, 
ocropus will work on windows. There is almost definitely code in pyocrhelper
which will have to be rewritten in order to make it work "out of the box" in
windows or any other non-linux OS. If I do get access to a windows system, 
I'll see if I can get it to work.

With regard to installation, you should not really need to configure much.
There is a .ini file where you can make system based adjustments:
   
   1. tmpdir=/tmp/pyocrhelper/ # a writable temporary directory (must exist)
   2. outputFileFormat=html # default output format
   3. ocrInputFormat=png # default input image format (should be ok)
   4. ocrLocation=/usr/bin/ocropus # where the ocropus binary is located

Additionally, if you change the location of the .ini file (i.e. copy it to
a directory outside of the main pyocrhelper directory) you will need to
change the os.getcwd() call in config.py:

   default_config = os.path.join(os.getcwd(),"pyocrhelper.ini")


USAGE
The pyocrhelper class file contains a quick example at the very bottom 
(this will probably be refactored to a test.py file at some stage). This 
example is a fragile (relies on exactly 3 commandline arguments being sent)
code snippet which simply shows how the class could be used:

   ./pyocrhelper.py /home/user/test.pdf /home/user/result.html ''

The final argument '' can hold an optional output format but is not used in
this situation. By not specifying an output file, the class will simply
return the scanned text (ideal for embedding in a script):
   ./pyocrhelper.py /home/user/test.pdf '' ''


TODO
A lot! Currently pyocrhelper has a quite heavy reliance on what Ocropus
is able to output (html). The html output by Ocropus is quite good and
it is conceivable that it could be parsed into (etc) XML for import into
OpenOffice.org. aspell could theoretically also be used to mark 
unrecognised words.

Ocropus and tesseract can also support non english languages. It may thus
be possible to add an option to the pyocrhelper class to cater for this.

For larger PDF files it may be worthwhile to use multithreading for some
of the repetitive actions which have to be carried out.


BUGS
If you spot anything, just post it on the Google Code wiki at:
http://code.google.com/p/pyocrhelper/issues/list

Also, if you think of a feature which might be useful, you could also 
post it at the above address, or send me a mail at
ciaranfarrell@babelworx.net
